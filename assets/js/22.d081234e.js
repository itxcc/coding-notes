(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{413:function(t,e,a){"use strict";a.r(e);var s=a(1),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git学习笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git学习笔记"}},[t._v("#")]),t._v(" Git学习笔记")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("从 "),a("strong",[t._v("svn")]),t._v(" 转到 "),a("strong",[t._v("git")]),t._v(" 版本控制之后，最大的不同在于区别分支（branch）管理，面向 分支（branch）开发")])]),t._v(" "),a("li",[a("p",[t._v("还多了一个暂存区的概念（git stash）")])]),t._v(" "),a("li",[a("p",[t._v("在进行远程仓库开始之前，需要进行创建 SSH Key")])])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ssh-keygen -t rsa -C "youremail@example.com" # 生成密钥\nssh -T git@github.com # 测试是否成功\n')])])]),a("ol",[a("li",[t._v("在 Mac 上查看自己的 SSH Key")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cat ~/.ssh/id_rsa.pub\n")])])]),a("h2",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),a("p",[a("strong",[t._v("账号配置相关")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global user.name itxcc # 设置用户名\ngit config --global user.email itxcc420@gmail.com # 设置邮箱\ngit config --list # 查看配置的信息\ngit help config # 获取帮助信息\n")])])]),a("p",[a("strong",[t._v("配置别名")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git config --global alias.st status #git st\ngit config --global alias.co checkout #git co\ngit config --global alias.br branch #git br\ngit config --global alias.ci commit #git ci\n")])])]),a("p",[a("strong",[t._v("基础命令")])]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 初始化操作\ngit init # 初始化git仓库\ngit status # 文件状态\ngit add [file1] [file2] ... #.或*代表全部添加\ngit commit -m \"msessage\"\n\n# commit备注规范：\n- type（文件）：‘备注’\n- feat：新功能（feature）\n- fix：修补bug\n- docs：文档（documentation）\n- style： 格式（不影响代码运行的变动）\n- refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n- perf: （改进性能的代码更改）\n- chore：项目构建\n\n# 回滚&&查看历史\ngit log # 查看所有提交记录\ngit reflog # 不小心删除了东西，先查到commit id，恢复\ngit reset –-hard 8ff24a6803173208f3e606e32dfcf82db9ac84d8 # 指定hash值\n\n# 分支相关\ngit branch # 显示所有本地分支\ngit branch test # 新建test分支\ngit push git test # 推送test分支到远程\ngit checout test # 切换到test分支\ngit merge test # 将test分支合并到当前分支\ngit branch -d test # 删除test分支\ngit push origin -d test # 删除远程test分支\n\n# 变基操作\ngit rebase master # 将master分之上超前的提交，变基到当前分支\ngit rebase --onto master 169a6 # 限制回滚范围，rebase 当前分支从169a6以后的提交\ngit rebase --interactive # 交互模式\ngit rebase --continue # 处理完冲突继续合并\ngit rebase --skip # 跳过\ngit rebase --abort # 取消合并\n\n# Tag 相关\ngit tag #列出现有标签\ngit tag v0.1 [branch|commit] # [从指定位置]新建标签\ngit tag -a v0.1 -m 'my version 1.4'# 新建带注释标签\ngit checkout tagname # 切换到标签\ngit tag -d v0.1 # 删除标签\ngit push origin :refs/tags/v0.1 # 删除远程标签\ngit push origin v1.5 # 推送分支到源上\ngit push origin --tags # 一次性推送所有分支\n\n# stash (暂存)相关\ngit stash # 暂存当前修改\ngit stash list # 查看所有 stash\ngit stash clear #注意这是清空你所有 stash 内容\ngit stash drop stash@{0} # 删除指定 stas\ngit stash pop stash@{0} # 恢复指定 stash\n\n# merge 合并本地分支(当前在 master 分支，合并 dev 到 master)\ngit merge dev\n\n\n")])])]),a("h2",{attrs:{id:"git工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git工作流"}},[t._v("#")]),t._v(" git工作流")]),t._v(" "),a("p",[t._v("项目分支分为 "),a("code",[t._v("master")]),t._v(" 分支和 "),a("code",[t._v("dev")]),t._v(" 分支")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("开发人员从远端拉取 "),a("code",[t._v("dev")]),t._v(" 分支到本地，然后本地再从 "),a("code",[t._v("dev")]),t._v(" 分支 "),a("code",[t._v("checkout")]),t._v(" 一个新分支")])]),t._v(" "),a("li",[a("p",[t._v("新开的分支命名规则为："),a("code",[t._v("姓名-功能-日期")]),t._v("，开发完成之后将该分支推到远端随后发起 "),a("code",[t._v("merge request")])])]),t._v(" "),a("li",[a("p",[t._v("管理员根据情况进行合并到 "),a("code",[t._v("dev")]),t._v(" 分支，最后由运维合并到 "),a("code",[t._v("master")]),t._v(" 分支")])])]),t._v(" "),a("h2",{attrs:{id:"踩抗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#踩抗"}},[t._v("#")]),t._v(" 踩抗")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在进行远程提交时，一定要注意有没有相互关联的远程仓库，建议直接："),a("code",[t._v("git push")]),t._v("，git会报错把正确的命令打出来，直接复制就行")])]),t._v(" "),a("li",[a("p",[t._v("把本地仓库和远程仓库的概念区分开来，举例一个操作：把dev分支的一个改动更新到master分支")]),t._v(" "),a("p",[t._v("在本地dev分支commit之后，切换master分支，进行merge  "),a("code",[t._v("git merge dev")])])]),t._v(" "),a("li",[a("p",[t._v("git commit 可以在本地多次提交，push的作用就是把改动推送到远端")]),t._v(" "),a("p",[t._v("git checkout -- file 可以撤销修改")])]),t._v(" "),a("li",[a("p",[t._v("如果遇到临时要修改的模块，自己本地分支也改了东西，切换不过去怎么办？")]),t._v(" "),a("p",[t._v("解决：先使用"),a("code",[t._v("git stash")]),t._v("存入本地缓存区，再"),a("code",[t._v("git checkout")]),t._v("切换到要修改的分支，修改完进行第一步")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git reflog")]),t._v("查看所有提交日志，git log和git reflog的区别")])])]),t._v(" "),a("h2",{attrs:{id:"还没搞懂的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#还没搞懂的"}},[t._v("#")]),t._v(" 还没搞懂的")]),t._v(" "),a("ol",[a("li",[t._v("git rebase 变基操作")])]),t._v(" "),a("p",[t._v("当前碰到一种场景：当出现需要变基的分支，直接解决冲突，然后继续")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/26493245",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git由浅入深之细说变基(rebase)"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰：Git教程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://blog.fwhyy.com/2018/06/Use-the-Merge-Request-working-mode-in-GitLab-in-the-team/",target:"_blank",rel:"noopener noreferrer"}},[t._v("在团队中使用GitLab中的Merge Request工作模式"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=i.exports}}]);